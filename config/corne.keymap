/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#include "../zmk-nodefree-config/helper.h"
#include "../zmk-nodefree-config/keypos_def/keypos_42keys.h"
#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5
#define KEYS_T LH2 LH1 LH0 RH0 RH1 RH2

#undef COMBO_HOOK
#define COMBO_HOOK require-prior-idle-ms = <150>;

#define HM_TAPPING_TERM 350

#define DEFAULT 0
#define LOWER   1
#define RAISE   2
#define ADJUST  3
#define OTHER   4

//shortcuts
#define HYPER_A &gqt LS(LG(LC(LALT))) A
#define HYPER_C &gqt LS(LG(LC(LALT))) C
#define RAYCAST &kp LS(LG(LC(LA(SPACE))))
#define CLOSETAB &kp LG(W)
#define DELWORD &kp LA(BSPC)
#define PLAINPASTE &kp LS(LA(LG(V))) 
#define REDO &kp LS(LG(Z)) 
#define REDO_TAB &kp LS(LG(T)) 
#define TAB_UP &kp LC(LA(PG_UP))
#define TAB_DN &kp LC(LA(PG_DN))
#define BACK &kp LG(LBKT)  
#define FORWARD &kp LG(RBKT)
#define CMD_K &kp LG(K)

#define XXX &none
#define ___ &trans

&lt {  // layer-tap config
    flavor = "tap-preferred";
    tapping-term-ms = <250>;
};

&sk {  // Sticky Layer Change
    release-after-ms = <2000>;
    quick-release;
};

//┌────────┬────────┬────────┬────────┬────────┬────────┐                          ┌────────┬────────┬────────┬────────┬────────┬────────┐
//             1        2        3        4        5                                   6        7        8        9        10       
//├────────┼────────┼────────┼────────┼────────┼────────┤                          ├────────┼────────┼────────┼────────┼────────┼────────┤
//             13       14       15       16       17                                  18       19       20       21       22       
//├────────┼────────┼────────┼────────┼────────┼────────┤                          ├────────┼────────┼────────┼────────┼────────┼────────┤
//             25       26       27       28       29                                  30       31       32       33       34       
//└────────┴────────┴────────┴───┬────┴───┬────┴───┬────┘                          └───┬────┴───┬────┴───┬────┴────────┴────────┴────────┘
//                                   36       37       38                        39        40       41
                              // └────────┴────────┴────────┘                 └────────┴────────┴────────┘

/ {
    macros {
        auto_brackets: auto_brackets {
            label = "auto_brackets";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&kp LS(N9)>
                , <&kp LS(N0)>
                , <&kp LEFT>
                ;
        };
        selall_copy: selall_copy {
            label = "selall_copy";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&kp LG(A)>
                , <&kp LG(C)>
                ;
        };
    };

    combos {
        compatible = "zmk,combos";

//autobracket        
        combo_brackets { 
            timeout-ms = <35>;
            key-positions = <31 32 33>;
            require-prior-idle-ms = <150>;
            bindings = <&auto_brackets>;
        };

//aprostophe 
        combo_aprostophe {
            timeout-ms = <35>;
            key-positions = <19 20 21>;
            require-prior-idle-ms = <10>;
            bindings = <&kp SQT>;
        };

//hypen
        combo_hyphen {
            timeout-ms = <35>;
            key-positions = <19 20 21 22>;
            require-prior-idle-ms = <10>;
            bindings = <&kp MINUS>;
        };

//raycast
        combo_raycast {
            timeout-ms = <35>;
            key-positions = <4 16>;
            require-prior-idle-ms = <150>;
            bindings = <&kp LS(LG(LC(LA(SPACE))))>;
        };

//delete word
        combo_deleteword {
            timeout-ms = <50>;
            key-positions = <14 15 16>;
            require-prior-idle-ms = <10>;
            bindings = <&kp LA(BSPC)>;
        };

//find        
        combo_find {
            timeout-ms = <35>;
            key-positions = <2 3 4>;
            require-prior-idle-ms = <150>;
            bindings = <&kp LG(F)>;

        };

        combo_cmdComma {
            timeout-ms = <35>;
            key-positions = <6 18>;
            require-prior-idle-ms = <150>;
            bindings = <&kp LG(COMMA)>;
        };
        
//        combo_cmdK {
//            timeout-ms = <35>;
//            key-positions = <14 15 16>;
//            require-prior-idle-ms = <150>;
//            bindings = <&kp LG(K)>;
//        };

        combo_undo {
            timeout-ms = <35>;
            key-positions = <25 26>;
            require-prior-idle-ms = <150>;
            bindings = <&kp LG(Z)>;
        };
        
        combo_copy {
            timeout-ms = <35>;
            key-positions = <26 27>;
            require-prior-idle-ms = <150>;
            bindings = <&kp LG(C)>;
        };

        combo_paste {
            timeout-ms = <35>;
            key-positions = <26 28>;
            require-prior-idle-ms = <150>;
            bindings = <&kp LG(V)>;
        };

        combo_cut {
            timeout-ms = <35>;
            key-positions = <25 27>;
            require-prior-idle-ms = <150>;
            bindings = <&kp LG(X)>;
        };

        combo_selall {
            timeout-ms = <35>;
            key-positions = <13 17>;
            require-prior-idle-ms = <150>;
            bindings = <&kp LG(A)>;
        };

        combo_cmdL {
            timeout-ms = <35>;
            key-positions = <20 21 22>;
            require-prior-idle-ms = <150>;
            bindings = <&kp LG(L)>;
        };

        combo_cmdO {
            timeout-ms = <35>;
            key-positions = <6 8>;
            require-prior-idle-ms = <150>;
            bindings = <&kp LG(O)>;
        };

        combo_cmdN {
            timeout-ms = <35>;
            key-positions = <6 19>;
            require-prior-idle-ms = <150>;
            bindings = <&kp LG(N)>;
        };

        combo_cmdW {
            timeout-ms = <35>;
            key-positions = <26 27 28>;
            require-prior-idle-ms = <150>;
            bindings = <&kp LG(W)>;
        };

        combo_cmdR {
            timeout-ms = <35>;
            key-positions = <3 4 5>;
            require-prior-idle-ms = <150>;
            bindings = <&kp LG(R)>;
        };

        combo_bullets {
            timeout-ms = <35>;
            key-positions = <7 19>;
            require-prior-idle-ms = <150>;
            bindings = <&kp LG(LS(N8))>;
        };

//hyper hyphen        
        combo_cmdHyphen {
            timeout-ms = <35>;
            key-positions = <5 17>;
            require-prior-idle-ms = <150>;
            bindings = <&kp LA(LC(LS(LG(MINUS))))>;
        };

//escape - left index
//        combo_escape {
//            timeout-ms = <35>;
//            key-positions = <7 8 9>;
//            require-prior-idle-ms = <150>;
//            bindings = <&kp ESC>;
//        };


//copy link
        combo_copylink {
            timeout-ms = <35>;
            key-positions = <13 14 15>;
            require-prior-idle-ms = <150>;
            bindings = <&kp LS(LG(C))>;
        };
        
        combo_cmdS {
            timeout-ms = <35>;
            key-positions = <17 29>;
            require-prior-idle-ms = <150>;
            bindings = <&kp LG(S)>;
        };

        combo_cmdQ {
            timeout-ms = <35>;
            key-positions = <1 10>;
            require-prior-idle-ms = <150>;
            bindings = <&kp LG(Q)>;
        };
    };

    behaviors {
        td_st: tap_dance_shift {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&sk LSHIFT>, <CMD_K>;
        };
        td_esc: tap_dance_esc {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp COMMA>, <&kp ESC>;
        };
        td_question: tap_dance_question {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp FSLH>, <&kp QMARK>;
        };
        gqt: require-prior-idle {
            compatible = "zmk,behavior-hold-tap";
            label = "GLOBAL_QUICK_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <250>;
            quick-tap-ms = <175>;                // repeat on tap-into-hold
            require-prior-idle-ms = <75>;         // requires PR #1387
            bindings = <&kp>, <&kp>;
        };
        gqt_l: thumb_right_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "GLOBAL_QUICK_TAP_SPACE";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <250>; //updated from HM_TAPPING_TERM
            quick-tap-ms = <175>;                // repeat on tap-into-hold
            //require-prior-idle-ms = <15>;         // requires PR #1387
            bindings = <&mo>, <&kp>;
        };
        hr_l: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT";
            #binding-cells = <2>;
            bindings = <&kp>,  <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <175>;                // repeat on tap-into-hold
            require-prior-idle-ms = <75>;         // requires PR #1387
            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            hold-trigger-on-release;             // requires PR #1423
        };
        hr_r: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick_tap_ms = <175>;
            require-prior-idle-ms = <75>;         // requires PR #1387
            hold-trigger-key-positions = <KEYS_L KEYS_T>;
            hold-trigger-on-release;             // requires PR #1423
        };
        hl_l: homerow_layers_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_LAYERS_LEFT";
            #binding-cells = <2>;
            bindings = <&mo>,  <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <175>;                // repeat on tap-into-hold
            require-prior-idle-ms = <75>;         // requires PR #1387
            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            hold-trigger-on-release;             // requires PR #1423
        };
        hl_r: homerow_layers_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_LAYERS_RIGHT";
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick_tap_ms = <175>;
            require-prior-idle-ms = <75>;         // requires PR #1387
            hold-trigger-key-positions = <KEYS_L KEYS_T>;
            hold-trigger-on-release;             // requires PR #1423
        };
    };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        bindings = <
//canary

//┌────────┬────────┬────────┬─────────┬──────────┬────────┐                          ┌────────┬──────────┬─────────┬────────────┬──────────┬─────────┐
   XXX      &kp W     &kp L    &kp Y     &kp P      &kp B                               &kp Z    &kp F      &kp O      &kp U       &kp SEMI      XXX
//├────────┼────────┼────────┼─────────┼──────────┼────────┤                          ├────────┼──────────┼─────────┼────────────┼──────────┼─────────┤
   XXX      HYPER_C   &kp R    &kp S     &hl_l 1 T  &kp G                               &kp M    &kp N      &kp E      &kp I       HYPER_A       XXX
//├────────┼────────┼────────┼─────────┼──────────┼────────┤                          ├────────┼──────────┼─────────┼────────────┼──────────┼─────────┤
   XXX      &kp Q     &kp J    &kp V     &kp D      &kp K                               &kp X    &kp H      &td_esc    &kp DOT    &td_question   XXX
//└────────┴────────┴────────┴───┬──-──┴──-─┬─-───┴───┬────┘                          └───┬────┴───┬──────┴───┬─────┴────────────┴──────────┴─────────┘  
                                     XXX     &mo 3     &td_st                &gqt_l 2 SPACE  &kp BSPC  XXX      
                                // └────────┴────────┴────────┘                 └────────┴────────┴────────┘

                        >;
                };
                lower_layer {
                        bindings = <

// layer 1 - navigation and editing - left index

//┌────────┬────────┬────────┬────────┬────────┬────────┐                          ┌────────┬────────┬────────┬────────┬────────┬────────┐
   XXX    CLOSETAB    XXX         PLAINPASTE    REDO      REDO_TAB                  TAB_UP   &kp LG(MINUS) &kp UP    &kp LG(EQUAL) XXX      XXX
//├────────┼────────┼────────┼────────┼────────┼────────┤                          ├────────┼────────┼────────┼────────┼────────┼────────┤
   XXX    &kp LSHFT   &kp LALT    &kp LGUI      XXX       XXX                       TAB_DN   &kp LEFT      &kp DOWN  &kp RIGHT     &kp TAB  XXX
//├────────┼────────┼────────┼────────┼────────┼────────┤                          ├────────┼────────┼────────┼────────┼────────┼────────┤ 
   XXX    &kp LG(Z)   &kp LG(X)   &kp LG(C)     &kp LG(V) &kp LG(B)                 &kp F4   &kp DEL       XXX       XXX           &kp RET  XXX
//└────────┴────────┴────────┴───┬────┴───┬────┴───┬────┘                          └───┬────┴───┬────┴───┬────┴────────┴────────┴────────┘
                                     ___      ___       ___                       ___      ___      ___
                                // └────────┴────────┴────────┘                 └────────┴────────┴────────┘
                        >;
                };

                raise_layer {
                        bindings = < 

// layer 2 - symbols and media - right thumb

//┌────────┬────────┬────────┬────────┬────────┬────────┐                          ┌────────┬────────┬────────┬────────┬────────┬────────┐
   XXX   &kp LS(N7) &kp LS(N4) &kp LS(N5) &kp LS(LBKT) &kp LS(RBKT)               &kp TILDE  &kp C_PP     &kp C_VOL_UP  &kp C_NEXT    XXX     XXX
//├────────┼────────┼────────┼────────┼────────┼────────┤                          ├────────┼────────┼────────┼────────┼────────┼────────┤
   XXX   &kp LS(N1) &kp LS(N2) &kp LS(N8) &kp LS(N9)   &kp LS(N0)                 &kp BSLH   &kp C_BRI_DN &kp C_VOL_DN  &kp C_BRI_UP  &tog 1  XXX
//├────────┼────────┼────────┼────────┼────────┼────────┤                          ├────────┼────────┼────────┼────────┼────────┼────────┤
   XXX   &kp MINUS  &kp LS(N3) &kp LS(N4) &kp LBKT     &kp RBKT                   &kp F4     XXX          XXX           XXX           XXX     XXX
//└────────┴────────┴────────┴───┬────┴───┬────┴───┬────┘                          └───┬────┴───┬────┴───┬────┴────────┴────────┴────────┘
                                     ___      ___       ___                       ___      ___      ___
                                // └────────┴────────┴────────┘                 └────────┴────────┴────────┘
                        >;
                };

                adjust_layer {
                        bindings = <                    

// layer 3 - numbers and settings and nav - left thumb

//┌────────┬────────┬────────┬────────┬────────┬────────┐                          ┌────────┬────────┬────────┬────────┬────────┬────────┐
  XXX     XXX      &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &bt BT_CLR            &kp MINUS &kp N7   &kp N8   &kp N9   &kp LS(EQUAL)  XXX
//├────────┼────────┼────────┼────────┼────────┼────────┤                          ├────────┼────────┼────────┼────────┼────────┼────────┤
  XXX     XXX      XXX           XXX           XXX           XXX                   &kp DOT   &kp N4   &kp N5   &kp N6   &kp EQUAL      XXX
//├────────┼────────┼────────┼────────┼────────┼────────┤                          ├────────┼────────┼────────┼────────┼────────┼────────┤
  XXX     XXX      XXX           XXX           XXX           XXX                   &kp N0    &kp N1   &kp N2   &kp N3   XXX            XXX
//└────────┴────────┴────────┴───┬────┴───┬────┴───┬────┘                          └───┬────┴───┬────┴───┬────┴────────┴────────┴────────┘
                                    ___      ___       ___                       ___      ___      ___
                                // └────────┴────────┴────────┘                 └────────┴────────┴────────┘
                        >;
                };

                other_layer {
                        bindings = <                    

// layer 4 - other home row - left pinky

//┌────────┬────────┬────────┬────────┬────────┬────────┐                          ┌────────┬────────┬────────┬────────┬────────┬────────┐
  XXX     XXX      XXX           XXX           XXX           XXX                    XXX      XXX      XXX         XXX      XXX        XXX
//├────────┼────────┼────────┼────────┼────────┼────────┤                          ├────────┼────────┼────────┼────────┼────────┼────────┤
  XXX     XXX      XXX           XXX           XXX           XXX                    XXX      XXX      XXX         XXX      XXX        XXX
//├────────┼────────┼────────┼────────┼────────┼────────┤                          ├────────┼────────┼────────┼────────┼────────┼────────┤
  XXX     XXX      XXX           XXX           XXX           XXX                    XXX      XXX      XXX         XXX      XXX        XXX
//└────────┴────────┴────────┴───┬────┴───┬────┴───┬────┘                          └───┬────┴───┬────┴───┬────┴────────┴────────┴────────┘
                                    ___      ___       ___                       ___      ___      ___
                                // └────────┴────────┴────────┘                 └────────┴────────┴────────┘
                        >;
                };
        };
};
