/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>


#include "../zmk-nodefree-config/helper.h"
#include "../zmk-nodefree-config/keypos_def/keypos_42keys.h"
#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5
#define KEYS_T LH2 LH1 LH0 RH0 RH1 RH2

#undef COMBO_HOOK
#define COMBO_HOOK global-quick-tap-ms = <150>;

#define HM_TAPPING_TERM 250

#define DEFAULT 0
#define LOWER   1
#define RAISE   2
#define ADJUST  3

#define HYPESC &gqt LS(LG(LC(LALT))) ESC
#define RAYCAST &kp LS(LG(LC(LA(SPACE))))
#define MEHN &gqt LS(LC(LALT)) N
#define DELWORD &kp BSPC
#define RTHUMB &gqt RGUI LA(BSPC)


#define XXX &none
#define ___ &trans

&lt {  // layer-tap config
    flavor = "tap-preferred";
    tapping-term-ms = <250>;
};

//┌────────┬────────┬────────┬────────┬────────┬────────┐                          ┌────────┬────────┬────────┬────────┬────────┬────────┐
//     0       1        2        3        4        5                                   6        7        8        9        10       11
//├────────┼────────┼────────┼────────┼────────┼────────┤                          ├────────┼────────┼────────┼────────┼────────┼────────┤
//    12       13       14       15       16       17                                  18       19       20       21       22       23
//├────────┼────────┼────────┼────────┼────────┼────────┤                          ├────────┼────────┼────────┼────────┼────────┼────────┤
//    24       25       26       27       28       29                                  30       31       32       33       34       35
//└────────┴────────┴────────┴───┬────┴───┬────┴───┬────┘                          └───┬────┴───┬────┴───┬────┴────────┴────────┴────────┘
//                                   36       37       38                        39       40        41
                              // └────────┴────────┴────────┘                 └────────┴────────┴────────┘

/ {
    macros {
        auto_brackets: auto_brackets {
            label = "auto_brackets";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&kp LS(N9)>
                , <&kp LS(N0)>
                , <&kp LEFT>
                ;
        };
    };

    combos {
        compatible = "zmk,combos";
        
        combo_back {
            timeout-ms = <30>;
            key-positions = <13 14 15>;
            bindings = <&kp LG(LBKT)>;
        };
        combo_fwds {
            timeout-ms = <30>;
            key-positions = <14 15 16>;
            bindings = <&kp LG(RBKT)>;
        };
        combo_find {
            timeout-ms = <30>;
            key-positions = <15 16 17>;
            bindings = <&kp LG(F)>;
        };
        combo_brackets {
            timeout-ms = <30>;
            key-positions = <19 20 21>;
            bindings = <&auto_brackets>;
        };
        combo_cmdComma {
            timeout-ms = <30>;
            key-positions = <6 18>;
            bindings = <&kp LG(COMMA)>;
        };
        combo_cmdK {
            timeout-ms = <30>;
            key-positions = <6 7>;
            bindings = <&kp LG(K)>;
        };
        combo_minimize {
            timeout-ms = <30>;
            key-positions = <3 4 5>;
            bindings = <&kp LG(M)>;
        };
        combo_undo {
            timeout-ms = <30>;
            key-positions = <25 26>;
            bindings = <&kp LG(Z)>;
        };
        combo_copy {
            timeout-ms = <30>;
            key-positions = <26 27>;
            bindings = <&kp LG(C)>;
        };
        combo_paste {
            timeout-ms = <30>;
            key-positions = <26 28>;
            bindings = <&kp LG(V)>;
        };
        combo_cut {
            timeout-ms = <30>;
            key-positions = <25 27>;
            bindings = <&kp LG(X)>;
        };
        combo_selall {
            timeout-ms = <30>;
            key-positions = <25 29>;
            bindings = <&kp LG(A)>;
        };
        combo_cmdL {
            timeout-ms = <30>;
            key-positions = <20 21 22>;
            bindings = <&kp LG(L)>;
        };
        combo_cmdO {
            timeout-ms = <30>;
            key-positions = <6 8>;
            bindings = <&kp LG(O)>;
        };
        combo_cmdN {
            timeout-ms = <30>;
            key-positions = <6 19>;
            bindings = <&kp LG(N)>;
        };
        combo_cmdW {
            timeout-ms = <30>;
            key-positions = <4 5>;
            bindings = <&kp LG(W)>;
        };
        combo_cmdR {
            timeout-ms = <30>;
            key-positions = <5 17>;
            bindings = <&kp LG(R)>;
        };
        combo_cmdHyphen {
            timeout-ms = <30>;
            key-positions = <2 3 4>;
            bindings = <&kp LA(LC(LS(LG(MINUS))))>;
        };
        combo_cmdS {
            timeout-ms = <30>;
            key-positions = <17 29>;
            bindings = <&kp LG(S)>;
        };
        combo_cmdQ {
            timeout-ms = <30>;
            key-positions = <1 10>;
            bindings = <&kp LG(Q)>;
        };
    };

    behaviors {
        gqt: global-quick-tap {
            compatible = "zmk,behavior-hold-tap";
            label = "GLOBAL_QUICK_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <250>;
            quick-tap-ms = <175>;                // repeat on tap-into-hold
            global-quick-tap-ms = <150>;         // requires PR #1387
            bindings = <&kp>, <&kp>;
        };
        hl_l: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT";
            #binding-cells = <2>;
            bindings = <&mo>,  <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <175>;                // repeat on tap-into-hold
            global-quick-tap-ms = <150>;         // requires PR #1387
            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            hold-trigger-on-release;             // requires PR #1423
        };

        hl_r: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT";
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick_tap_ms = <175>;
            global-quick-tap-ms = <150>;         // requires PR #1387
            hold-trigger-key-positions = <KEYS_L KEYS_T>;
            hold-trigger-on-release;             // requires PR #1423
        };
    };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        bindings = <

//┌────────┬────────┬────────┬────────┬────────┬────────┐                          ┌────────┬────────┬────────┬────────┬────────┬────────┐
   &kp TAB  &kp B    &kp L    &kp D    &kp W    &kp Z                               &kp SEMI &kp F    &kp O     &kp U   &kp J    &kp MINUS
//├────────┼────────┼────────┼────────┼────────┼────────┤                          ├────────┼────────┼────────┼────────┼────────┼────────┤
   HYPESC   MEHN     &kp R    &hl_l 3 T  &hl_l 1 S  &kp G                           &kp Y   &hl_r 2 H  &hl_r 1 A   &kp E   &kp I    &kp SQT
//├────────┼────────┼────────┼────────┼────────┼────────┤                          ├────────┼────────┼────────┼────────┼────────┼────────┤
   RAYCAST  &kp Q    &kp X    &kp M    &kp C    &kp V                               &kp K    &kp P    &kp COMMA &kp DOT &kp FSLH &kp RET
//└────────┴────────┴────────┴───┬────┴───┬────┴───┬────┘                          └───┬────┴───┬────┴───┬────┴────────┴────────┴────────┘  
                                   &kp LGUI &kp DEL &kp LSHFT                    RTHUMB &kp SPACE DELWORD
                                // └────────┴────────┴────────┘                 └────────┴────────┴────────┘
                        >;
                };

                lower_layer {
                        bindings = <

//┌────────┬────────┬────────┬────────┬────────┬────────┐                          ┌────────┬────────┬────────┬────────┬────────┬────────┐
   ___   ___   ___   &kp LS(LA(LG(V))) &kp LS(LG(Z)) &kp LS(LG(T))        &kp LC(LA(PG_UP))  XXX      &kp UP   XXX       &kp C_BRI_UP  &kp LG(EQUAL)
//├────────┼────────┼────────┼────────┼────────┼────────┤                          ├────────┼────────┼────────┼────────┼────────┼────────┤
&kp LCTRL &kp LSHFT &kp LALT &kp LGUI  XXX      XXX                       &kp LC(LA(PG_DN))  &kp LEFT &kp DOWN &kp RIGHT &kp C_BRI_DN  &kp LG(MINUS)
//├────────┼────────┼────────┼────────┼────────┼────────┤                          ├────────┼────────┼────────┼────────┼────────┼────────┤
&kp LS(LG(C)) &kp LG(Z) &kp LG(X) &kp LG(C) &kp LG(V) &kp LG(B)                     &kp DEL  &kp C_PP  &kp C_VOL_DN &kp C_VOL_UP  XXX  ___
//└────────┴────────┴────────┴───┬────┴───┬────┴───┬────┘                          └───┬────┴───┬────┴───┬────┴────────┴────────┴────────┘
                                    ___      ___       ___                       ___      ___      ___
                                // └────────┴────────┴────────┘                 └────────┴────────┴────────┘
                        >;
                };

                raise_layer {
                        bindings = <

//┌────────┬────────┬────────┬────────┬────────┬────────┐                          ┌────────┬────────┬────────┬────────┬────────┬────────┐
   XXX     &kp LS(N7) &kp LS(N4) &kp LS(N5) &kp LS(LBKT) &kp LS(RBKT)               XXX      XXX      &kp F4   &to 0    &to 4      &bootloader
//├────────┼────────┼────────┼────────┼────────┼────────┤                          ├────────┼────────┼────────┼────────┼────────┼────────┤
&kp LS(N3) &kp LS(N1) &kp LS(N2) &kp LS(N8) &kp LS(N9)   &kp LS(N0)                 XXX      XXX      XXX      XXX      XXX      XXX
//├────────┼────────┼────────┼────────┼────────┼────────┤                          ├────────┼────────┼────────┼────────┼────────┼────────┤
&kp GRAVE  &kp BSLH   &kp LS(N6) XXX        &kp LBKT     &kp RBKT                &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 XXX XXX
//└────────┴────────┴────────┴───┬────┴───┬────┴───┬────┘                          └───┬────┴───┬────┴───┬────┴────────┴────────┴────────┘
                                    ___      ___       ___                       ___      ___      ___
                                // └────────┴────────┴────────┘                 └────────┴────────┴────────┘
                        >;
                };

                adjust_layer {
                        bindings = <                    

//┌────────┬────────┬────────┬────────┬────────┬────────┐                          ┌────────┬────────┬────────┬────────┬────────┬────────┐
   XXX      XXX      XXX      XXX      XXX      XXX                                &kp MINUS &kp N7   &kp N8   &kp N9   &kp LS(N5)       &kp LS(EQUAL)
//├────────┼────────┼────────┼────────┼────────┼────────┤                          ├────────┼────────┼────────┼────────┼────────┼────────┤
   XXX      XXX      XXX      XXX      XXX      XXX                                 &kp DOT  &kp N4   &kp N5   &kp N6   &kp LS(SEMI)     &kp EQUAL
//├────────┼────────┼────────┼────────┼────────┼────────┤                          ├────────┼────────┼────────┼────────┼────────┼────────┤
   XXX      XXX      XXX      XXX      XXX      XXX                                 &kp N0   &kp N1   &kp N2   &kp N3   &kp LS(N2)       &kp LG(RET)
//└────────┴────────┴────────┴───┬────┴───┬────┴───┬────┘                          └───┬────┴───┬────┴───┬────┴────────┴────────┴────────┘
                                    ___      ___       ___                       ___      ___      ___
                                // └────────┴────────┴────────┘                 └────────┴────────┴────────┘
                        >;
                };
        };
};
